package services

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"net/http"
)

// API Key vi·∫øt tr·ª±c ti·∫øp (KH√îNG c·∫ßn d√πng .env n·ªØa)
const apiKey = "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"

// ‚úÖ ƒê√∫ng URL API Groq
const groqAPIURL = "https://api.groq.com/openai/v1/chat/completions"

// Struct payload g·ª≠i API Groq
type groqPayload struct {
	Model    string         `json:"model"`
	Messages []MessageEntry `json:"messages"`
}

type MessageEntry struct {
	Role    string `json:"role"`
	Content string `json:"content"`
}

// G·ªçi API Groq
func CallGroqAPI(prompt string) (string, error) {
	if apiKey == "" {
		return "", errors.New("‚ùå API Key kh√¥ng h·ª£p l·ªá ho·∫∑c tr·ªëng")
	}

	// ‚úÖ S·ª≠a payload theo chu·∫©n Groq API
	payload := groqPayload{
		Model: "mixtral-8x7b-32768", // Ch·ªçn model ph√π h·ª£p c·ªßa Groq
		Messages: []MessageEntry{
			{"system", "B·∫°n l√† m·ªôt tr·ª£ l√Ω AI."},
			{"user", prompt},
		},
	}

	jsonData, _ := json.Marshal(payload)
	request, _ := http.NewRequest("POST", groqAPIURL, bytes.NewBuffer(jsonData))
	request.Header.Set("Authorization", "Bearer "+apiKey)
	request.Header.Set("Content-Type", "application/json")

	client := &http.Client{}
	resp, err := client.Do(request)
	if err != nil {
		return "", errors.New("‚ùå L·ªói khi g·ªçi API Groq")
	}
	defer resp.Body.Close()

	// ‚úÖ ƒê·ªçc d·ªØ li·ªáu tr·∫£ v·ªÅ
	body, _ := ioutil.ReadAll(resp.Body)

	// ‚úÖ In th·ª≠ d·ªØ li·ªáu API Groq tr·∫£ v·ªÅ ƒë·ªÉ ki·ªÉm tra
	fmt.Println("üîç API Response:", string(body))

	// ‚úÖ Parse JSON ƒë·ªÉ ki·ªÉm tra response
	var result map[string]interface{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return "", errors.New("‚ùå L·ªói khi parse JSON t·ª´ API Groq")
	}

	// ‚úÖ Ki·ªÉm tra response c√≥ d·ªØ li·ªáu hay kh√¥ng
	choices, ok := result["choices"].([]interface{})
	if !ok || len(choices) == 0 {
		return "", errors.New("‚ùå API Groq kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu h·ª£p l·ªá")
	}

	firstChoice := choices[0].(map[string]interface{})
	message := firstChoice["message"].(map[string]interface{})
	content, exists := message["content"].(string)
	if !exists {
		return "", errors.New("‚ùå API Groq kh√¥ng tr·∫£ v·ªÅ n·ªôi dung h·ª£p l·ªá")
	}

	return content, nil
}
